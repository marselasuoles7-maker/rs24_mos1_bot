
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext
import pandas as pd
import smtplib
import random
import string
from datetime import datetime, time
import os

from config import BOT_TOKEN, ADMINS, role_config

FILIAl, DEPARTMENT, FULLNAME, PHONE, CODE, MAIN_MENU, MEETING_TYPE, CLIENT_NAME, VENDOR_NAME, SHIPMENT = range(10)

user_sessions = {}
meeting_data = []
confirmation_codes = {}

def load_structure_from_excel():
    df = pd.read_excel("structure_phone.xlsx")
    structure = {}
    phone_lookup = {}
    for _, row in df.iterrows():
        filial = str(row["–§–∏–ª–∏–∞–ª"]).strip()
        dept = str(row["–û—Ç–¥–µ–ª"]).strip()
        fio = str(row["–§–ò–û"]).strip()
        phone = ''.join(filter(str.isdigit, str(row["–¢–µ–ª–µ—Ñ–æ–Ω"])))
        role = str(row["–î–æ–ª–∂–Ω–æ—Å—Ç—å"]).strip()

        structure.setdefault(filial, {}).setdefault(dept, {})[phone] = {
            "fio": fio,
            "role": role
        }
        phone_lookup[phone] = {
            "filial": filial,
            "department": dept,
            "fio": fio,
            "role": role
        }
    return structure, phone_lookup

structure_data, phone_lookup = load_structure_from_excel()
FILIALS = list(structure_data.keys())

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    return PHONE

def get_phone(update: Update, context: CallbackContext):
    phone = ''.join(filter(str.isdigit, update.message.text))
    user_info = phone_lookup.get(phone)
    if not user_info:
        update.message.reply_text("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    code = ''.join(random.choices(string.digits, k=6))
    confirmation_codes[update.effective_user.id] = (phone, code)
    context.user_data["user_info"] = user_info
    update.message.reply_text(f"–í–∞—à –∫–æ–¥: {code} (–≤ –ø—Ä–æ–¥–µ —Å—é–¥–∞ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è SMS)")
    return CODE

def get_code(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    input_code = update.message.text.strip()
    phone, correct_code = confirmation_codes.get(user_id, (None, None))
    if input_code == correct_code:
        user_info = context.user_data["user_info"]
        user_sessions[user_id] = {
            "phone": phone,
            **user_info
        }
        reply_keyboard = [["–û—Ç—á–µ—Ç"]]
        update.message.reply_text("–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return MAIN_MENU
    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return CODE

def main_menu(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "–û—Ç—á–µ—Ç":
        reply_keyboard = [["–ú–µ–Ω–µ–¥–∂–µ—Ä‚Äì–ö–ª–∏–µ–Ω—Ç"], ["–ú–µ–Ω–µ–¥–∂–µ—Ä‚Äì–ö–ª–∏–µ–Ω—Ç‚Äì–í–µ–Ω–¥–æ—Ä"], ["üì¶ –û—Ç–≥—Ä—É–∑–∫–∞ –∑–∞ –¥–µ–Ω—å"]]
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return MEETING_TYPE
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU

def meeting_type(update: Update, context: CallbackContext):
    user_sessions[update.effective_user.id]["meeting_type"] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    return CLIENT_NAME

def client_name(update: Update, context: CallbackContext):
    user_sessions[update.effective_user.id]["client"] = update.message.text
    if user_sessions[update.effective_user.id]["meeting_type"] == "–ú–µ–Ω–µ–¥–∂–µ—Ä‚Äì–ö–ª–∏–µ–Ω—Ç‚Äì–í–µ–Ω–¥–æ—Ä":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞:")
        return VENDOR_NAME
    else:
        return save_meeting(update, context)

def vendor_name(update: Update, context: CallbackContext):
    user_sessions[update.effective_user.id]["vendor"] = update.message.text
    return save_meeting(update, context)

def save_meeting(update: Update, context: CallbackContext):
    session = user_sessions[update.effective_user.id]
    meeting = {
        "user_id": update.effective_user.id,
        "phone": session.get("phone"),
        "fio": session.get("fio"),
        "filial": session.get("filial"),
        "department": session.get("department"),
        "role": session.get("role"),
        "meeting_type": session.get("meeting_type"),
        "client": session.get("client"),
        "vendor": session.get("vendor", "-"),
        "shipment": session.get("shipment", "-"),
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M")
    }
    meeting_data.append(meeting)
    update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=ReplyKeyboardMarkup([["–û—Ç—á–µ—Ç"]], resize_keyboard=True))
    return MAIN_MENU

def shipment_handler(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞ –¥–µ–Ω—å (–≤ —Ä—É–±–ª—è—Ö):", reply_markup=ReplyKeyboardRemove())
    return SHIPMENT

def shipment_value(update: Update, context: CallbackContext):
    user_sessions[update.effective_user.id]["shipment"] = update.message.text
    return save_meeting(update, context)

def send_excel_report(context: CallbackContext):
    if not meeting_data:
        return
    df = pd.DataFrame(meeting_data)

    for user_id, session in user_sessions.items():
        role = session.get("role")
        if role not in role_config:
            continue
        scope = role_config[role]
        if scope == "all":
            df_filtered = df
        elif scope == "filial":
            df_filtered = df[df["filial"] == session["filial"]]
        elif scope == "department":
            df_filtered = df[df["department"] == session["department"]]
        else:
            continue

        if df_filtered.empty:
            continue

        filename = f"report_{user_id}_{datetime.now().strftime('%Y%m%d')}.xlsx"
        df_filtered.to_excel(filename, index=False)
        context.bot.send_document(chat_id=user_id, document=open(filename, "rb"))
        os.remove(filename)

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–í—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    job = updater.job_queue
    job.run_daily(send_excel_report, time=time(17, 58))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHONE: [MessageHandler(Filters.text & ~Filters.command, get_phone)],
            CODE: [MessageHandler(Filters.text & ~Filters.command, get_code)],
            MAIN_MENU: [MessageHandler(Filters.text & ~Filters.command, main_menu)],
            MEETING_TYPE: [MessageHandler(Filters.text & ~Filters.command, meeting_type)],
            CLIENT_NAME: [MessageHandler(Filters.text & ~Filters.command, client_name)],
            VENDOR_NAME: [MessageHandler(Filters.text & ~Filters.command, vendor_name)],
            SHIPMENT: [MessageHandler(Filters.text & ~Filters.command, shipment_value)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
